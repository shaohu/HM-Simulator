/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDialogCheckinToTrajectory.java
 *
 * Created on 2012-6-26, 14:12:36
 */

package levyflight.socialNetwork;

import Static.StaticLib;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LineString;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import levyflight.Data.Node;
import levyflight.Data.Trajectory;
import org.geotools.data.DataStore;
import org.geotools.data.DataStoreFactorySpi;
import org.geotools.data.DataUtilities;
import org.geotools.data.DefaultTransaction;
import org.geotools.data.FeatureWriter;
import org.geotools.data.Transaction;
import org.geotools.data.shapefile.ShapefileDataStoreFactory;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.data.simple.SimpleFeatureSource;
import org.geotools.feature.FeatureCollections;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.feature.simple.SimpleFeatureTypeBuilder;
import org.geotools.geometry.jts.JTSFactoryFinder;
import org.geotools.referencing.CRS;
import org.geotools.swing.data.JFileDataStoreChooser;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;

/**
 *
 * @author wu
 */
public class JDialogCheckinToTrajectory extends javax.swing.JDialog {
    
    private ArrayList<PersonInfo> personList;

    /** Creates new form JDialogCheckinToTrajectory */
    public JDialogCheckinToTrajectory(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField_checkin = new javax.swing.JTextField();
        jButton_browseCheckin = new javax.swing.JButton();
        jButton_browseedge = new javax.swing.JButton();
        jTextField_edge = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField_group = new javax.swing.JTextField();
        jButton_browsegroup = new javax.swing.JButton();
        jButton_browseResult = new javax.swing.JButton();
        jTextField_result = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel_info = new javax.swing.JLabel();
        jButton_cancel = new javax.swing.JButton();
        jButton_ok = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(levyflight.LevyFlightApp.class).getContext().getResourceMap(JDialogCheckinToTrajectory.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField_checkin.setText(resourceMap.getString("jTextField_checkin.text")); // NOI18N
        jTextField_checkin.setName("jTextField_checkin"); // NOI18N

        jButton_browseCheckin.setText(resourceMap.getString("jButton_browseCheckin.text")); // NOI18N
        jButton_browseCheckin.setName("jButton_browseCheckin"); // NOI18N
        jButton_browseCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseCheckinActionPerformed(evt);
            }
        });

        jButton_browseedge.setText(resourceMap.getString("jButton_browseedge.text")); // NOI18N
        jButton_browseedge.setName("jButton_browseedge"); // NOI18N
        jButton_browseedge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseedgeActionPerformed(evt);
            }
        });

        jTextField_edge.setText(resourceMap.getString("jTextField_edge.text")); // NOI18N
        jTextField_edge.setName("jTextField_edge"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jTextField_group.setText(resourceMap.getString("jTextField_group.text")); // NOI18N
        jTextField_group.setName("jTextField_group"); // NOI18N

        jButton_browsegroup.setText(resourceMap.getString("jButton_browsegroup.text")); // NOI18N
        jButton_browsegroup.setName("jButton_browsegroup"); // NOI18N
        jButton_browsegroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browsegroupActionPerformed(evt);
            }
        });

        jButton_browseResult.setText(resourceMap.getString("jButton_browseResult.text")); // NOI18N
        jButton_browseResult.setName("jButton_browseResult"); // NOI18N
        jButton_browseResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browseResultActionPerformed(evt);
            }
        });

        jTextField_result.setText(resourceMap.getString("jTextField_result.text")); // NOI18N
        jTextField_result.setName("jTextField_result"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel_info.setFont(resourceMap.getFont("jLabel_info.font")); // NOI18N
        jLabel_info.setForeground(resourceMap.getColor("jLabel_info.foreground")); // NOI18N
        jLabel_info.setText(resourceMap.getString("jLabel_info.text")); // NOI18N
        jLabel_info.setName("jLabel_info"); // NOI18N

        jButton_cancel.setFont(resourceMap.getFont("jButton_cancel.font")); // NOI18N
        jButton_cancel.setForeground(resourceMap.getColor("jButton_cancel.foreground")); // NOI18N
        jButton_cancel.setText(resourceMap.getString("jButton_cancel.text")); // NOI18N
        jButton_cancel.setName("jButton_cancel"); // NOI18N
        jButton_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cancelActionPerformed(evt);
            }
        });

        jButton_ok.setFont(resourceMap.getFont("jButton_ok.font")); // NOI18N
        jButton_ok.setForeground(resourceMap.getColor("jButton_ok.foreground")); // NOI18N
        jButton_ok.setText(resourceMap.getString("jButton_ok.text")); // NOI18N
        jButton_ok.setName("jButton_ok"); // NOI18N
        jButton_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_okActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(347, 347, 347)
                        .addComponent(jButton_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_ok, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField_checkin, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton_browseCheckin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField_edge, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton_browseedge))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField_group, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton_browsegroup))
                                .addComponent(jLabel_info, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField_result, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_browseResult)))))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_checkin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_browseCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField_edge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_browseedge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField_group, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_browsegroup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_result, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_browseResult))
                .addGap(20, 20, 20)
                .addComponent(jLabel_info, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_ok, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_browseCheckinActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton_browseCheckinActionPerformed
    {//GEN-HEADEREND:event_jButton_browseCheckinActionPerformed
        JFileDataStoreChooser chooser = new JFileDataStoreChooser("txt");
        chooser.setDialogTitle("open checkin data");
        if (StaticLib.InitialFileDirectory != null && StaticLib.InitialFileDirectory.exists())
        {
            chooser.setCurrentDirectory(StaticLib.InitialFileDirectory);
        }
        int returnVal = chooser.showSaveDialog(null);
        if (returnVal == JFileDataStoreChooser.APPROVE_OPTION)
        {
            this.jTextField_checkin.setText(chooser.getSelectedFile().getAbsolutePath());
        }
        StaticLib.InitialFileDirectory=chooser.getSelectedFile();
}//GEN-LAST:event_jButton_browseCheckinActionPerformed

    private void jButton_browseedgeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton_browseedgeActionPerformed
    {//GEN-HEADEREND:event_jButton_browseedgeActionPerformed
        JFileDataStoreChooser chooser = new JFileDataStoreChooser("txt");
        chooser.setDialogTitle("open edge data");
        if (StaticLib.InitialFileDirectory != null && StaticLib.InitialFileDirectory.exists())
        {
            chooser.setCurrentDirectory(StaticLib.InitialFileDirectory);
        }
        int returnVal = chooser.showSaveDialog(null);
        if (returnVal == JFileDataStoreChooser.APPROVE_OPTION)
        {
            this.jTextField_edge.setText(chooser.getSelectedFile().getAbsolutePath());
        }
        StaticLib.InitialFileDirectory=chooser.getSelectedFile();
}//GEN-LAST:event_jButton_browseedgeActionPerformed

    private void jButton_browsegroupActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton_browsegroupActionPerformed
    {//GEN-HEADEREND:event_jButton_browsegroupActionPerformed
        JFileDataStoreChooser chooser = new JFileDataStoreChooser("txt");
        chooser.setDialogTitle("open group data");
        if (StaticLib.InitialFileDirectory != null && StaticLib.InitialFileDirectory.exists())
        {
            chooser.setCurrentDirectory(StaticLib.InitialFileDirectory);
        }
        int returnVal = chooser.showSaveDialog(null);
        if (returnVal == JFileDataStoreChooser.APPROVE_OPTION)
        {
            this.jTextField_group.setText(chooser.getSelectedFile().getAbsolutePath());
        }
        StaticLib.InitialFileDirectory=chooser.getSelectedFile();
}//GEN-LAST:event_jButton_browsegroupActionPerformed

    private void jButton_browseResultActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton_browseResultActionPerformed
    {//GEN-HEADEREND:event_jButton_browseResultActionPerformed
        JFileDataStoreChooser chooser = new JFileDataStoreChooser("");
        chooser.setDialogTitle("set result file path");
        if (StaticLib.InitialFileDirectory != null && StaticLib.InitialFileDirectory.exists())
        {
            chooser.setSaveFile(StaticLib.InitialFileDirectory);
        }
        int returnVal = chooser.showSaveDialog(null);
        if (returnVal == JFileDataStoreChooser.APPROVE_OPTION)
        {
            this.jTextField_result.setText(chooser.getSelectedFile().getAbsolutePath());
        }
        StaticLib.InitialFileDirectory=chooser.getSelectedFile();
}//GEN-LAST:event_jButton_browseResultActionPerformed

    private void jButton_cancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton_cancelActionPerformed
    {//GEN-HEADEREND:event_jButton_cancelActionPerformed
        this.dispose();
}//GEN-LAST:event_jButton_cancelActionPerformed

    boolean genWithoutShp=true;
    private void jButton_okActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton_okActionPerformed
    {//GEN-HEADEREND:event_jButton_okActionPerformed
        if(genWithoutShp)
        {
            System.out.println("generate without shp file");
            genWithoutSHP();
            this.dispose();
            return;
        }
        File checkinFile=new File(this.jTextField_checkin.getText());
        File edgeFile=new File(this.jTextField_edge.getText());
        File groupFile=new File(this.jTextField_group.getText());
        File resultFile=new File(this.jTextField_result.getText()+".txt");
        try
        {
            FileInputStream checkinStream = new FileInputStream(checkinFile);
            FileInputStream edgeStream = new FileInputStream(edgeFile);
            FileInputStream groupStream = new FileInputStream(groupFile);
            BufferedReader checkinReader=new BufferedReader(new InputStreamReader(checkinStream));
            BufferedReader edgeReader=new BufferedReader(new InputStreamReader(edgeStream));
            BufferedReader groupReader=new BufferedReader(new InputStreamReader(groupStream));
            int id=-1;
            String checkinRecord="";
            String edgeRecord="";
            String groupRecord="";
            personList=new ArrayList<PersonInfo>();

            //----------------------------------------------
            //此处开始分类处理并逐个获取信息

            int groupId=0;
            groupRecord=groupReader.readLine();
            while(groupRecord!=null)
            {
                if(groupRecord.contains("GROUP"))
                {
                    int index1=groupRecord.indexOf("[");
                    int index2=groupRecord.indexOf("]");
                    groupId=Integer.parseInt(groupRecord.substring(index1+2, index2-1));
                }else
                {
                    groupRecord=groupRecord.trim();
                    if(!groupRecord.isEmpty())
                    {
                        personList.add(new PersonInfo(Integer.parseInt(groupRecord), groupId));
                    }
                }

                groupRecord=groupReader.readLine();
            }
            System.out.println("group size = "+personList.size());
            groupReader.close();
            //个人所属组信息获取完毕

            edgeRecord=edgeReader.readLine();
            PersonInfo pi=personList.get(0);
            int mark=0;
            while(edgeRecord!=null)
            {
                String[] records=edgeRecord.split("\t");
                id=Integer.parseInt(records[0]);
                if(pi.id!=id)
                {
                    pi=getPerson(id);
                }
                pi.degree++;
                edgeRecord=edgeReader.readLine();
                mark++;
                if(mark%10000==0)
                {
                    System.out.println("program step "+mark);
                }
//                if(mark>300000)
//                {
//                    System.out.println("quick break");
//                    break;
//                }
            }
            edgeReader.close();
            //个人 度 信息计算完毕

            
            BufferedWriter resultWriter=new BufferedWriter(new FileWriter(resultFile));


            //shp file 构造
            File fileToSave=new File(this.jTextField_result.getText()+".shp");
            SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();
            builder.setName("Location");
            builder.setCRS(CRS.decode("EPSG:4326"));

            // add attributes in order
            //id groupid startTime endTime totalNodeNumber  degree 回转半径 特征向量 第一签到点（id x y 个数 比例） 第二签到点（id x y 个数 比例）
            builder.add("Location", LineString.class);
            builder.add("Id", Integer.class);
            builder.add("GroupId", Integer.class);
            builder.add("StartTime", Long.class);
            builder.add("EndTime", Long.class);
            builder.add("TotalNodeNum", Integer.class);
            builder.add("Degree", Double.class);
            builder.add("ROG", Double.class);
            builder.add("e1", Double.class);
            builder.add("e2", Double.class);
            builder.add("cosAngle", Double.class);
            builder.add("P1_id", Integer.class);
            builder.add("P1_x", Double.class);
            builder.add("P1_y", Double.class);
            builder.add("P1_count", Integer.class);
            builder.add("P1_persicion", Double.class);
            builder.add("P2_id", Integer.class);
            builder.add("P2_x", Double.class);
            builder.add("P2_y", Double.class);
            builder.add("P2_count", Integer.class);
            builder.add("P2_persicion", Double.class);

            builder.length(19).add(StaticLib.BeginTimeFieldString, String.class);

            // build the type
            final SimpleFeatureType featureType = builder.buildFeatureType();



            SimpleFeatureCollection collection = FeatureCollections.newCollection();
            SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(featureType);
            GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory(null);

            //------------------------
            
            id=-1;
            ArrayList<CheckinNode>nodeList=null;
            checkinRecord=checkinReader.readLine();
            mark=0;
            while(checkinRecord!=null)
            {
                String[] records=checkinRecord.split("\t");
                int newId=Integer.parseInt(records[0]);
                if(newId==id)//在原轨迹基础上加点
                {
                    String timeRecord=records[1].replace('T', ' ');
                    timeRecord=timeRecord.replace("Z", "");
                    Calendar c=Calendar.getInstance();
                    c.setTime(StaticLib.LevyFlightDateFormat.parse(timeRecord));
                    double x=Double.parseDouble(records[3]);
                    double y=Double.parseDouble(records[2]);
                    int placeId=Integer.parseInt(records[4]);
                    CheckinNode cn=new CheckinNode(x, y, c, placeId);
                    nodeList.add(cn);
                }else//保存原有的轨迹，生成新的轨迹
                {
                    if(nodeList!=null&&nodeList.size()>1)
                    {
                        //id groupid startTime endTime totalNodeNumber  degree 回转半径 特征向量 第一签到点（id x y 个数 比例） 第二签到点（id x y 个数 比例）
                        Trajectory traj=new Trajectory(new ArrayList<Node>(nodeList));
                        traj.ID=id;
                        groupId=getGroupId(id);
                        Calendar startTime=traj.getStartTime();
                        Calendar endTime=traj.getEndTime();
                        int totalNodeNum=nodeList.size();
                        double degree=getDegree(id);
                        double rog=traj.GetRadiusOfGyration();
                        double[] principalAxes=traj.GetPrincipalAxes();
                        ArrayList<Double> statisticsLiat=nodeStatistics(nodeList);
                        StringBuilder sb=new StringBuilder();
                        sb.append(id+" ");
                        sb.append(groupId+" ");
                        if(startTime!=null)
                        {
                            sb.append(startTime.getTimeInMillis()+" ");
                        }else
                        {
                            sb.append("NoStartTime ");
                        }
                        if(endTime!=null)
                        {
                            sb.append(endTime.getTimeInMillis()+" ");
                        }else
                        {
                            sb.append("NoEndTime ");
                        }
                        sb.append(totalNodeNum + " ");
                        sb.append(degree+" ");
                        sb.append(rog+" ");
                        sb.append(principalAxes[0]+" ");
                        sb.append(principalAxes[1]+" ");
                        sb.append(principalAxes[2]+" ");
                        for(int i=0;i<9;i++)
                        {
                            sb.append(statisticsLiat.get(i)+" ");
                        }
                        sb.append(statisticsLiat.get(9));
                        resultWriter.write(sb.toString());
                        resultWriter.newLine();

                        if(traj.NodeList.size()>1)
                        {
                            //写入shp
                            Coordinate[] coordinates = new Coordinate[traj.NodeList.size()];
                            long beginTime = traj.NodeList.get(0).Time.getTimeInMillis();

                            for (int i = 0; i < traj.NodeList.size(); i++)
                            {
                                int timeSpan = (int) ((traj.NodeList.get(i).Time.getTimeInMillis() - beginTime) / 1000);
                                coordinates[i] = new Coordinate(traj.NodeList.get(i).getX(), traj.NodeList.get(i).getY(), timeSpan);
                            }
                            LineString shpTra = geometryFactory.createLineString(coordinates);
                            String time = StaticLib.LevyFlightDateFormat.format(traj.NodeList.get(0).Time.getTime());

                            featureBuilder.add(shpTra);
                            featureBuilder.add(id);
                            featureBuilder.add(groupId);
                            featureBuilder.add(startTime.getTimeInMillis());
                            featureBuilder.add(endTime.getTimeInMillis());
                            featureBuilder.add(totalNodeNum);
                            featureBuilder.add(degree);
                            featureBuilder.add(rog);
                            featureBuilder.add(principalAxes[0]);
                            featureBuilder.add(principalAxes[1]);
                            featureBuilder.add(principalAxes[2]);
                            for(int i=0;i<10;i++)
                            {
                                featureBuilder.add(statisticsLiat.get(i));
                            }
                            SimpleFeature feature = featureBuilder.buildFeature(null);
                            collection.add(feature);
                        }



                    }else
                    {
                        if(nodeList!=null)
                        {
                            System.out.println(id+" "+nodeList.size()+"size error!!");
                        }
                    }
                    id=newId;
                    nodeList=new ArrayList<CheckinNode>();
                    String timeRecord=records[1].replace('T', ' ');
                    timeRecord=timeRecord.replace("Z", "");
                    Calendar c=Calendar.getInstance();
                    c.setTime(StaticLib.LevyFlightDateFormat.parse(timeRecord));
                    double x=Double.parseDouble(records[3]);
                    double y=Double.parseDouble(records[2]);
                    int placeId=Integer.parseInt(records[4]);
                    CheckinNode cn=new CheckinNode(x, y, c, placeId);
                    nodeList.add(cn);
                }
                if(id%500==0)
                {
                    System.out.println("checkin process step = "+id);
                    resultWriter.flush();
                }
                checkinRecord=checkinReader.readLine();
                if(id==10000)
                {
                    break;
                }
            }

            Trajectory traj=new Trajectory(new ArrayList<Node>(nodeList));
            traj.ID=id;
            groupId=getGroupId(id);
            Calendar startTime=traj.getStartTime();
            Calendar endTime=traj.getEndTime();
            int totalNodeNum=nodeList.size();
            double degree=getDegree(id);
            double rog=traj.GetRadiusOfGyration();
            double[] principalAxes=traj.GetPrincipalAxes();
            ArrayList<Double> statisticsLiat=nodeStatistics(nodeList);
            StringBuilder sb=new StringBuilder();
            sb.append(id+" ");
            sb.append(groupId+" ");
            if(startTime!=null)
            {
                sb.append(startTime.getTimeInMillis()+" ");
            }else
            {
                sb.append("NoStartTime ");
            }
            if(endTime!=null)
            {
                sb.append(endTime.getTimeInMillis()+" ");
            }else
            {
                sb.append("NoEndTime ");
            }
            sb.append(totalNodeNum+" ");
            sb.append(degree+" ");
            sb.append(rog+" ");
            sb.append(principalAxes[0]+" ");
            sb.append(principalAxes[1]+" ");
            sb.append(principalAxes[2]+" ");
            for(int i=0;i<9;i++)
            {
            sb.append(statisticsLiat.get(i)+" ");
            }
            sb.append(statisticsLiat.get(9));
            resultWriter.write(sb.toString());

            if(traj.NodeList.size()>1)
            {
                //写入shp
                Coordinate[] coordinates = new Coordinate[traj.NodeList.size()];
                long beginTime = traj.NodeList.get(0).Time.getTimeInMillis();

                for (int i = 0; i < traj.NodeList.size(); i++)
                {
                    int timeSpan = (int) ((traj.NodeList.get(i).Time.getTimeInMillis() - beginTime) / 1000);
                    coordinates[i] = new Coordinate(traj.NodeList.get(i).getX(), traj.NodeList.get(i).getY(), timeSpan);
                }
                LineString shpTra = geometryFactory.createLineString(coordinates);
                String time = StaticLib.LevyFlightDateFormat.format(traj.NodeList.get(0).Time.getTime());

                featureBuilder.add(shpTra);
                featureBuilder.add(id);
                featureBuilder.add(groupId);
                featureBuilder.add(startTime.getTimeInMillis());
                featureBuilder.add(endTime.getTimeInMillis());
                featureBuilder.add(totalNodeNum);
                featureBuilder.add(degree);
                featureBuilder.add(rog);
                featureBuilder.add(principalAxes[0]);
                featureBuilder.add(principalAxes[1]);
                featureBuilder.add(principalAxes[2]);
                for(int i=0;i<10;i++)
                {
                    featureBuilder.add(statisticsLiat.get(i));
                }
                SimpleFeature feature = featureBuilder.buildFeature(null);
                collection.add(feature);
            }

            resultWriter.close();




            SimpleFeatureSource source = DataUtilities.source(collection);DataStoreFactorySpi factory = new ShapefileDataStoreFactory();
            Map<String, Serializable> creat = new HashMap<String, Serializable>();
            creat.put("url", fileToSave.toURI().toURL());
            creat.put("creat spatial index", Boolean.TRUE);
            DataStore newDataStore = factory.createDataStore(creat);
            newDataStore.createSchema(featureType);
            Transaction transaction = new DefaultTransaction("WriteNew");
            FeatureWriter<SimpleFeatureType, SimpleFeature> writer = newDataStore.getFeatureWriterAppend(featureType.getTypeName(), transaction);
            SimpleFeatureIterator iterator = collection.features();
            try
            {
                while (iterator.hasNext())
                {
                    SimpleFeature feature = iterator.next();
                    SimpleFeature copy = writer.next();
                    copy.setAttributes(feature.getAttributes());

                    Geometry geometry = (Geometry) feature.getDefaultGeometry();

                    copy.setDefaultGeometry(geometry);
                    writer.write();
                }
                transaction.commit();
            } catch (Exception problem)
            {

            } finally
            {
                writer.close();
                iterator.close();
                transaction.close();
            }
            
        }
        catch (Exception ex)
        {
            Logger.getLogger(JDialogCheckinToTrajectory.class.getName()).log(Level.SEVERE, null, ex);

        }
        this.dispose();
    }//GEN-LAST:event_jButton_okActionPerformed

    private void genWithoutSHP()
    {
        File checkinFile=new File(this.jTextField_checkin.getText());
        File edgeFile=new File(this.jTextField_edge.getText());
        File groupFile=new File(this.jTextField_group.getText());
        File resultFile=new File(this.jTextField_result.getText()+".txt");
        try
        {
            FileInputStream checkinStream = new FileInputStream(checkinFile);
            FileInputStream edgeStream = new FileInputStream(edgeFile);
            FileInputStream groupStream = new FileInputStream(groupFile);
            BufferedReader checkinReader=new BufferedReader(new InputStreamReader(checkinStream));
            BufferedReader edgeReader=new BufferedReader(new InputStreamReader(edgeStream));
            BufferedReader groupReader=new BufferedReader(new InputStreamReader(groupStream));
            int id=-1;
            String checkinRecord="";
            String edgeRecord="";
            String groupRecord="";
            personList=new ArrayList<PersonInfo>();

            //----------------------------------------------
            //此处开始分类处理并逐个获取信息

            int groupId=0;
            groupRecord=groupReader.readLine();
            while(groupRecord!=null)
            {
                if(groupRecord.contains("GROUP"))
                {
                    int index1=groupRecord.indexOf("[");
                    int index2=groupRecord.indexOf("]");
                    groupId=Integer.parseInt(groupRecord.substring(index1+2, index2-1));
                }else
                {
                    groupRecord=groupRecord.trim();
                    if(!groupRecord.isEmpty())
                    {
                        personList.add(new PersonInfo(Integer.parseInt(groupRecord), groupId));
                    }
                }

                groupRecord=groupReader.readLine();
            }
            System.out.println("group size = "+personList.size());
            groupReader.close();
            //个人所属组信息获取完毕

            edgeRecord=edgeReader.readLine();
            PersonInfo pi=personList.get(0);
            int mark=0;
            while(edgeRecord!=null)
            {
                String[] records=edgeRecord.split("\t");
                id=Integer.parseInt(records[0]);
                if(pi.id!=id)
                {
                    pi=getPerson(id);
                }
                pi.degree++;
                edgeRecord=edgeReader.readLine();
                mark++;
                if(mark%10000==0)
                {
                    System.out.println("program step "+mark);
                }
//                if(mark>300000)
//                {
//                    System.out.println("quick break");
//                    break;
//                }
            }
            edgeReader.close();
            //个人 度 信息计算完毕


            BufferedWriter resultWriter=new BufferedWriter(new FileWriter(resultFile));


            id=-1;
            ArrayList<CheckinNode>nodeList=null;
            checkinRecord=checkinReader.readLine();
            mark=0;
            while(checkinRecord!=null)
            {
                String[] records=checkinRecord.split("\t");
                int newId=Integer.parseInt(records[0]);
                if(newId==id)//在原轨迹基础上加点
                {
                    String timeRecord=records[1].replace('T', ' ');
                    timeRecord=timeRecord.replace("Z", "");
                    Calendar c=Calendar.getInstance();
                    c.setTime(StaticLib.LevyFlightDateFormat.parse(timeRecord));
                    double x=Double.parseDouble(records[3]);
                    double y=Double.parseDouble(records[2]);
                    int placeId=Integer.parseInt(records[4]);
                    CheckinNode cn=new CheckinNode(x, y, c, placeId);
                    nodeList.add(cn);
                }else//保存原有的轨迹，生成新的轨迹
                {
                    if(nodeList!=null&&nodeList.size()>1)
                    {
                        //id groupid startTime endTime totalNodeNumber  degree 回转半径 特征向量 第一签到点（id x y 个数 比例） 第二签到点（id x y 个数 比例）
                        Trajectory traj=new Trajectory(new ArrayList<Node>(nodeList));
                        traj.ID=id;
                        groupId=getGroupId(id);
                        Calendar startTime=traj.getStartTime();
                        Calendar endTime=traj.getEndTime();
                        int totalNodeNum=nodeList.size();
                        double degree=getDegree(id);
                        double rog=traj.GetRadiusOfGyration();
                        double[] principalAxes=traj.GetPrincipalAxes();
                        ArrayList<Double> statisticsLiat=nodeStatistics(nodeList);
                        StringBuilder sb=new StringBuilder();
                        sb.append(id+" ");
                        sb.append(groupId+" ");
                        if(startTime!=null)
                        {
                            sb.append(startTime.getTimeInMillis()+" ");
                        }else
                        {
                            sb.append("NoStartTime ");
                        }
                        if(endTime!=null)
                        {
                            sb.append(endTime.getTimeInMillis()+" ");
                        }else
                        {
                            sb.append("NoEndTime ");
                        }
                        sb.append(totalNodeNum + " ");
                        sb.append(degree+" ");
                        sb.append(rog+" ");
                        sb.append(principalAxes[0]+" ");
                        sb.append(principalAxes[1]+" ");
                        sb.append(principalAxes[2]+" ");
                        for(int i=0;i<9;i++)
                        {
                            sb.append(statisticsLiat.get(i)+" ");
                        }
                        sb.append(statisticsLiat.get(9));
                        resultWriter.write(sb.toString());
                        resultWriter.newLine();



                    }else
                    {
                        if(nodeList!=null)
                        {
                            System.out.println(id+" "+nodeList.size()+"size error!!");
                        }
                    }
                    if(id%1000==0)
                    {
                        System.out.println("checkin process step = "+id);
                        resultWriter.flush();
                    }
                    id=newId;
                    nodeList=new ArrayList<CheckinNode>();
                    String timeRecord=records[1].replace('T', ' ');
                    timeRecord=timeRecord.replace("Z", "");
                    Calendar c=Calendar.getInstance();
                    c.setTime(StaticLib.LevyFlightDateFormat.parse(timeRecord));
                    double x=Double.parseDouble(records[3]);
                    double y=Double.parseDouble(records[2]);
                    int placeId=Integer.parseInt(records[4]);
                    CheckinNode cn=new CheckinNode(x, y, c, placeId);
                    nodeList.add(cn);
                }
                checkinRecord=checkinReader.readLine();
            }

            Trajectory traj=new Trajectory(new ArrayList<Node>(nodeList));
            traj.ID=id;
            groupId=getGroupId(id);
            Calendar startTime=traj.getStartTime();
            Calendar endTime=traj.getEndTime();
            int totalNodeNum=nodeList.size();
            double degree=getDegree(id);
            double rog=traj.GetRadiusOfGyration();
            double[] principalAxes=traj.GetPrincipalAxes();
            ArrayList<Double> statisticsLiat=nodeStatistics(nodeList);
            StringBuilder sb=new StringBuilder();
            sb.append(id+" ");
            sb.append(groupId+" ");
            if(startTime!=null)
            {
                sb.append(startTime.getTimeInMillis()+" ");
            }else
            {
                sb.append("NoStartTime ");
            }
            if(endTime!=null)
            {
                sb.append(endTime.getTimeInMillis()+" ");
            }else
            {
                sb.append("NoEndTime ");
            }
            sb.append(totalNodeNum+" ");
            sb.append(degree+" ");
            sb.append(rog+" ");
            sb.append(principalAxes[0]+" ");
            sb.append(principalAxes[1]+" ");
            sb.append(principalAxes[2]+" ");
            for(int i=0;i<9;i++)
            {
            sb.append(statisticsLiat.get(i)+" ");
            }
            sb.append(statisticsLiat.get(9));
            resultWriter.write(sb.toString());

            resultWriter.close();

        }
        catch (Exception ex)
        {
            Logger.getLogger(JDialogCheckinToTrajectory.class.getName()).log(Level.SEVERE, null, ex);

        }
    }

    private PersonInfo getPerson(int id)
    {
        for(PersonInfo pi : personList)
        {
            if(pi.id==id)
            {
                return pi;
            }
        }
        return null;
    }

    private int getGroupId(int id)
    {
        for(PersonInfo pi : personList)
        {
            if(pi.id==id)
            {
                return pi.groupId;
            }
        }
        return -1;
    }

    private int getDegree(int id)
    {
        for(PersonInfo pi : personList)
        {
            if(pi.id==id)
            {
                return pi.degree;
            }
        }
        return 0;
    }
    
    private ArrayList<Double>nodeStatistics(ArrayList<CheckinNode>nodeList)
    {
        ArrayList<Integer>idList=new ArrayList<Integer>();
        ArrayList<Integer>countList=new ArrayList<Integer>();
        for(CheckinNode node : nodeList)
        {
            int index=idList.indexOf(node.id);
            if(index>0)
            {
                countList.set(index, countList.get(index)+1);
            }else
            {
                idList.add(node.id);
                countList.add(1);
            }
        }
        int max1=-1;
        int max2=-1;
        for(int i:countList)
        {
            if(max1<=i)
            {
                max2=max1;
                max1=i;
            }
            if(max2<i&&max1>i)
            {
                max2=i;
            }
        }
        if(countList.indexOf(max1)<0)
        {
            System.out.println("index error "+countList.indexOf(max1)+"  "+max1+"  "+nodeList.size());
            String a="";
            for(int i: countList)
            {
                a+=i+" ";
            }
            System.out.println(a);
        }
        int id1=idList.get(countList.indexOf(max1));
        int id2=id1;
        if(countList.indexOf(max2)>=0)
        {
            id2=idList.get(countList.indexOf(max2));
        }else
        {
            System.out.println("只有一个点"+max1+" - "+max2+" "+nodeList.size());
            System.out.println("max2 index"+countList.indexOf(max2));
            String a="";
            for(int i: countList)
            {
                a+=i+" ";
            }
            System.out.println(a);
        }
        double x1=0;
        double y1=0;
        double x2=0;
        double y2=0;
        for(CheckinNode node : nodeList)
        {
            if(node.id==id1)
            {
                x1=node.getX();
                y1=node.getY();
            }
            if(node.id==id2)
            {
                x2=node.getX();
                y2=node.getY();
            }
        }
        int count=nodeList.size();
        ArrayList<Double>resultList=new ArrayList<Double>();
        resultList.add((double)id1);
        resultList.add(x1);
        resultList.add(y1);
        resultList.add((double)max1);
        resultList.add((double)max1/(double)count);
        resultList.add((double)id2);
        resultList.add(x2);
        resultList.add(y2);
        resultList.add((double)max2);
        resultList.add((double)max2/(double)count);
        
        return resultList;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogCheckinToTrajectory dialog = new JDialogCheckinToTrajectory(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_browseCheckin;
    private javax.swing.JButton jButton_browseResult;
    private javax.swing.JButton jButton_browseedge;
    private javax.swing.JButton jButton_browsegroup;
    private javax.swing.JButton jButton_cancel;
    private javax.swing.JButton jButton_ok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_info;
    private javax.swing.JTextField jTextField_checkin;
    private javax.swing.JTextField jTextField_edge;
    private javax.swing.JTextField jTextField_group;
    private javax.swing.JTextField jTextField_result;
    // End of variables declaration//GEN-END:variables

}

class PersonInfo
{
    int id;
    int groupId;
    int degree;

    public PersonInfo(int Id, int GroupId)
    {
        this.groupId=GroupId;
        this.id=Id;
        this.degree=0;
    }
}